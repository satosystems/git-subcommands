#!/usr/bin/env bash

readonly VERSION='1.0.0'

rebased=()

run() {
  printf '\033[34m%s\033[m\n' "$*"
  $*
  return $?
}

rebase() {
  if [[ ${rebased[*]} =~ $2 ]]; then
    return 0
  fi

  local -r no_merged_branches=`git branch --sort=-authordate --no-merged | grep -v $1`
  local -r merge_base=`git merge-base $1 $2`

  # Loop the log line by line
  while read -r line
  do
    local hash=`echo $line | awk '{print $1}'`
    local branches=`echo $line | awk '{if(NF!=1){for(i=2;i<NF;i++){printf("%s%s",$i,OFS=" ")}print $NF}}'`

    # End the loop if merge_base and hash are the same
    if [[ ! ${branches[*]} =~ $2 ]] && [[ "$merge_base" = "$hash" ]]; then
      # Rebase a branch if that branch is found before merge_base
      local branch
      for branch in $branches
      do
        # Forward rebase for the target branch
        if [[ $2 = $branch ]] && [[ ! ${rebased[*]} =~ $2 ]]; then
          run git rebase $1 $2 || exit 1
          rebased+=$2
          return 0
        fi
      done

      # Rebase with --onto if not the target branch
      if [[ ! $2 = $branch ]] && [[ ! ${rebased[*]} =~ $2 ]]; then
        run git rebase --onto=$1 $merge_base $2 || exit 1
        rebased+=$2
        return 0
      fi
    fi

    # Rebase any branches found along the way and rebase there
    local branch
    for branch in $branches
    do
      if [[ ! $2 = $branch ]] && [[ ! ${branches[*]} =~ $2 ]] && [[ ${no_merged_branches[*]} =~ $branch ]]; then
        rebase $1 $branch
        rebase $branch $2
        return 0
      fi
    done
  done < <(git log --pretty=format:'%H%d' $2 | sed 's/HEAD -> //' | sed 's/[(),]//g')

  if [[ ${rebased[*]} =~ $2 ]]; then
    return 0
  fi

  # Rebase with --onto if not found, and rebase to the same location if multiple branches are in the same location
  local branches=`git log --pretty=format:'%d' $2 | sed 's/HEAD -> //' | sed 's/[(),]//g' | head -n 1 | awk '{for(i=1;i<NF;i++){printf("%s%s",$i,OFS=" ")}print $NF}'`
  local -r num=`echo $branches | awk '{print NF}'`
  local -r current_hash=`git log --pretty=format:'%H' $2 | head -n 1`
  run git rebase --onto=$1 $merge_base $2 || exit 1

  if [[ $num -ne 1 ]]; then
    local -r one_line=`git log --pretty=format:'%H%d' $current_hash | sed 's/HEAD -> //' | sed 's/[(),]//g' | head -n 1`
    local branches=`echo $one_line | awk '{if(NF!=1){for(i=2;i<NF;i++){printf("%s%s",$i,OFS=" ")}print $NF}}'`
    local hash=`echo $one_line | awk '{print $1}'`

    local branch
    for branch in $branches
    do
      run git rebase --onto=$2 $hash $branch || exit 1
    done
  fi
  rebased+=$2
}

main() {
  if [[ "$1" = "" ]]; then
    {
      echo 'git all-rebase <branch>'
      echo 'git all-rebase --version'
      echo 'git all-rebase --help'
    } >&2
    exit 1
  fi

  case $1 in
    --version )
      echo $VERSION
      return 0
      ;;

    --help )
      man git-all-rebase
      return 0
      ;;
  esac

  local -r current=`git rev-parse --abbrev-ref HEAD`
  if [[ ! $1 = $current ]]; then
    run git checkout $1 || exit 1
  fi

  local branch
  for branch in `git branch --sort=-authordate --no-merged | grep -v $1`
  do
    rebase $1 $branch
  done

  if [[ ! "$current" = "`git rev-parse --abbrev-ref HEAD`" ]]; then
    run git checkout $current || exit 1
  fi

  return 0
}

main $1
